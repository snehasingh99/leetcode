class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        
        def valid(i, j):
            if i < 0 or j < 0 or i >= r or j >= c or grid[i][j] != '1':
                return False
            return True
        
        def dfs(src):
            grid[src[0]][src[1]] = "0"
        
            for direction in directions:
                new_x = src[0] + direction[0]
                new_y = src[1] + direction[1]
                
                if valid(new_x, new_y):
                    dfs((new_x, new_y))
        
        if not grid:
            return 0
        directions = [(1,0),(0,1),(-1,0),(0,-1)]
        
        r = len(grid)
        c = len(grid[0])
        islands = 0
        for row in range(r):
            for col in range(c):
                if grid[row][col] == "1":
                    islands += 1
                    dfs((row,col))
        return islands
