class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        
        
        if not grid:
            return -1
        
        def is_valid(x,y):
            if x < 0 or y < 0 or x >= r or y >= c or grid[x][y] != 0:
                return False
            return True
        
        def bfs():
            
            directions  = [(1, 0), (-1, 0), (0, 1), (0, -1), (-1, 1), (-1, -1), (1, -1), (1, 1)]
            if (r - 1, c - 1) == (0, 0):
                return 1 if grid[0][0] == 0 else -1
            
            if grid[0][0] == 1:
                return -1
            
            while queue:
            
                node, distance = queue.popleft()
                
                if node == (r - 1, c - 1):
                    return distance + 1
        
                for direction in directions:
                    new_x = node[0] + direction[0]
                    new_y = node[1] + direction[1]        
                    if is_valid(new_x, new_y) and (new_x, new_y) not in visited:
                        queue.append(((new_x, new_y), distance + 1))
                        visited.add((new_x, new_y))

            return -1
        
        queue = deque()
        visited = set()
        r = len(grid)
        c = len(grid[0])
        queue.append(((0,0), 0))
        visited.add((0,0))
        steps = bfs()
        
        return steps
