class DLLNode(object):
    def __init__(self):
        self.prev = None
        self.key = None
        self.val = None
        self.next = None
        
class DLL(object):
    def __init__(self):
        self.head = DLLNode()
        self.tail = DLLNode()
        self.head.next = self.tail
        self.tail.prev = self.head
    
    def move_to_head(self, node):
        self.remove_node(node)
        self.insert(node)

    def pop_tail(self):
        if self.tail.prev == self.head:
            return None
        node = self.tail.prev
        self.remove_node(node)
        return node
    
    def remove_node(self, node):
        
        node_prev = node.prev
        node_next = node.next
        node_prev.next = node_next
        node_next.prev = node_prev
        
    def insert(self, node):
        
        head_next = self.head.next
        node.next = head_next
        head_next.prev = node
        node.prev = self.head
        self.head.next = node
        
class LRUCache:
    
    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = {}
        self.dll = DLL()
        self.curr_count = 0

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if key not in self.cache:
            return -1
        
        node = self.cache[key]
        self.dll.move_to_head(node)
        return node.val
    
    def put(self, key: int, value: int) -> None:
        
        if key in self.cache:
            node = self.cache[key]
            node.val = value
            self.dll.move_to_head(node)
            return 
        
        new_node = DLL()
        new_node.key = key
        new_node.val = value
        
        if self.curr_count == self.capacity:
            removed_tail = self.dll.pop_tail()
            self.cache.pop(removed_tail.key)
            self.dll.insert(new_node)
            self.cache[key] = new_node
        else:
            self.curr_count += 1
            self.dll.insert(new_node)
            self.cache[key] = new_node

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
