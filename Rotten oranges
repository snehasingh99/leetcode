class Solution(object):
    def orangesRotting(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        
        def valid(i, j):
            if i < 0 or j < 0 or i >= r or j >= c or grid[i][j] != 1:
                return False
            return True
        
        def bfs():
            
            max_dist = 0
            
            while q:
                
                node, dist = q.popleft()
                max_dist = max(max_dist, dist)
                
                for direction in directions:
                    new_x = node[0] + direction[0]
                    new_y = node[1] + direction[1]
                    
                    if valid(new_x, new_y) and (new_x, new_y) not in visited:
                        visited.add((new_x, new_y))
                        q.append(((new_x, new_y), dist + 1))
                
            return max_dist
                
        
        
        if not grid:
            return 0
        
        q = deque()
        visited = set()
        r = len(grid)
        c = len(grid[0])
        fresh_oranges = 0
        rotten_oranges = 0
        directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]
        
        for i in range(r):
            for j in range(c):
                if grid[i][j] == 2:
                    q.append(((i, j), 0))
                    visited.add((i, j))
                    rotten_oranges += 1
                    
                elif grid[i][j] == 1:
                    fresh_oranges += 1
                    
        max_time = bfs()
        
        
        if len(visited) == fresh_oranges + rotten_oranges:
            return max_time
        else:
            return -1
